generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Brand {
  id                  Int      @id @default(autoincrement())
  slug                String  @unique @db.VarChar(255)
  name                String  @unique @db.VarChar(255)
  wheelbases          Wheelbase[]
  wheels              Wheel[]
  pedals              Pedal[]
}

model Platform {
  id                  Int      @id @default(autoincrement())
  slug                String  @unique @db.VarChar(255)
  name                String  @unique @db.VarChar(255)
  
  wheelbases          Wheelbase[] @relation("wheelbasePlatform")
  pedals              Pedal[] @relation("pedalPlatform")
}

model Wheelbase {
  id                  Int      @id @default(autoincrement())
  slug                String  @unique @db.VarChar(255)
  model               String  @db.VarChar(255)
  brandId             Int
  brand               Brand   @relation(fields: [brandId], references: [id])
  price               Float
  torque              Float?
  drive_type          ForceFeedbackType
  swappable_wheels    Boolean
  platforms           Platform[] @relation("wheelbasePlatform")
  degrees_of_rotation String? @default("N/A")
  wheel_included      Boolean
  pedals_included     Boolean
  notes               String[]

  wheels              Wheel[] @relation("wheelbaseWheel")
}

model Wheel {
  id                  Int      @id @default(autoincrement())
  slug                String  @unique @db.VarChar(255)
  model               String  @db.VarChar(255)
  brandId             Int
  brand               Brand   @relation(fields: [brandId], references: [id])
  price               Float
  diameter            Float
  type                String?
  material            String?

  wheelbases          Wheelbase[] @relation("wheelbaseWheel")
}

model Pedal {
  id                     Int      @id @default(autoincrement())
  slug                   String  @unique @db.VarChar(255)
  model                  String  @db.VarChar(255)
  brandId                Int
  brand                  Brand   @relation(fields: [brandId], references: [id])
  type                   PedalType
  price                  Float
  throttle_sensor        SensorType @default(NA)
  brake_sensor           SensorType @default(NA)
  brake_sensor_load_max  Int?
  brake_sensor_load_unit ForceUnit?
  clutch_sensor          SensorType @default(NA)
  heel_plate_included    Boolean
  platforms              Platform[] @relation("pedalPlatform")
  notes                  String[]
}

enum PedalType {
  THROTTLE
  BRAKE
  CLUTCH
  THROTTLE_BRAKE
  THREE_PEDAL
  PROGRAMMABLE
}

enum SensorType {
  HALL
  POTENTIOMETER
  LOAD_CELL
  HYDRAULIC_PRESSURE
  INDUCTIVE
  MAGNETIC
  OPTICAL
  OTHER
  NA
  NONE
}

enum ForceFeedbackType {
  BELT
  GEAR
  DIRECT_DRIVE
  OTHER
  NA
}

enum ForceUnit {
  NEWTONS
  NM
  KG
  PSI
  BAR
  LB
  LBFT
  LBIN
  OTHER
  NA
}